RewardApi 시스템

1. RewardAPI의 개념
RewardAPI는 Finalchain의 노드 판매에 따른 보상을 관리하기 위한 시스템이다.
WCL을 통하여 노드가 구매되고 해당 구매 내역에 대한 NFTID 및 회원은 Wallet 정보들에 대하여 정해진 보상률에 따라 보상을 지급하고 분배하게 된다.
이러한 관리를 위하여 데이터 구조는 node_wallet이라는 데이터베이스와 user_wallet이라는 데이터 베이스에 필요한 테이블들을 구성하여 관리하고 있다.
대부분의 구조는 Bitstoa의 지갑 구조를 그대로 사용하고 있다.
node_wallet은 Finalchain으로 부터 보상되는 노드의 보상을 기록하고 관리한다.
user_wallet은 각 노드 구매에 참여한 사용자들의 기록과 지갑 정보들이 관리된다. node_wallet에 지급된 보상을 구매 내역에 따라 user_wallet의 각 사용자에게 분배하게 된다.

그리고 node_wallet에는 이 API에 접근을 제어하기 위한 tbl_api_tx 테이블이 존재하며 이 테이블에 기록된 정보 apiKey, secret key symbol 정보들을 이용하여 signatrue 문자열을 만들어 접근 인증을 수행하도록 하엿다.

이 signature 정보는 HmacSHA256 알고리즘을 이용하여 Parameter정보를 암호화를 수행한 결과의 데이터 입니다. 
API Key, Timestamp, version 정보를 이용하여 Signature 데이터가 생성된다.
Timestamp는 꼭 현재 시간 기준으로 적용이 되어야 한다. (이는 프로젝트 목적에 맞추어서 사용할것.) 
(apiKey=a2310fb0bb92477b93d0608e2507955e&timestamp=2022-07-10 14:02:56.479&version=V1.0.0)
apiKey와 timestamp, version 정보를 secret key를 이용하여 hmacsha256으로 암호화 한다.

HMAC SHA256 알고리즘이란
일반 SHA256 과, HMAC SHA256 은 해싱 방식이 조금 다르다. HMAC SHA256 의 경우엔 데이터를 주어진 비밀키(secret) 와 함께 해싱을 하고, 해싱된 결과물을 비밀키와 함께 다시 한번 해싱을 수행한다.이렇게 함으로서, 해시의 보안을 조금 강화하는 것이다.
(API 구성의 자세한 사항은 RewardInterfaceAPI 문서 참조)

2. 서버의 정보
IP : 175.207.29.22
ID : ubuntu
Password : xhdzmsdkdl_hholdings​ (통큰아이_hholdings)
sshPort:7922

3. Database Table의 구조
1) node_wallet
이 테이블은 노드별로 발생되는 보상을 관리하기 위한 테이블이다.
- tbl_node_history
-> node들의 기본 정보를 기록하여 관리하는 테이블이다. (DB 코멘트 참조)
- tbl_wallet
-> node들이 받은 보상을 기록하는 지갑 테이블이다. (v_amount는 쌓이기만 한다.)
- tbl_in
-> node들의 지갑에 입금된 기록을 저장하는 테이블이다.
- tbl_out
-> 1번 지갑에서 node들의 지갑으로 전송한 기록을 저장하는 테이블이다.
기본적으로 v_amount가 타 지갑으로 전송되면 감소를 하여야 하지만 node 지갑에서 사용자 지갑으로의 분배에서는 v_amount를 감소시키지 않고 있다. 이는 v_amount를 최종적으로 보상 금액과 맞는지 확인하기 위하여 그대로 유지하고 있다.
1번 지갑에서만 다른 노드 지갑으로 전송이 되기에 1번 지갑의 v_amount만 감소된다.
이 노드의 v_amount와 해당 노드를 구매한 user_wallet의 보상 금액이 같아야 한다.

- tbl_api_tx
-> RewardApi에 접근할 symbol에 따른 apikey와 secret key를 관리하는 테이블이다.

2) user_wallet
- tbl_buy_history
-> 노드에 대한 구매된 내역을 기록하는 테이블이다. (이 테이블의 기록에 따라 노드의 보상이 분배된다.)
- tbl_reward_user
-> 노드를 구매한 wallet 주소를 가지는 지갑 사용자 테이블이다. 
- tbl_unlock_history
-> 180일이 지난 unlock 처리를 수행한 이력을 기록하는 테이블이다.
- tbl_wallet
-> node들이 받은 보상을 해당 node를 구매한 user들에 보상을 기록하는 지갑 테이블이다. 
- tbl_in
-> node들의 지갑에 입금된 내용에 보상을 해당 node를 구매한 user들에 보상이 지급된 기록을 저장하는 테이블이다.
- tbl_out
-> node들의 지갑에 입금된 내용에 보상을 1번 지갑으로 부터 해당 node를 구매한 user들에 보상이 전송된 기록을 저장하는 테이블이다.

4. 전체적인 흐름
1) flow 정리
노드가 생성되면 finalchain 산하의 DGOS로 부터 reward-api로 node/insert 요청
이때 node_wallet으로 수신받은 내용을 기준으로 tbl_node_history에 node 정보를 기록하고 tbl_wallet에 전달 받은 지갑으로 지갑을 생성

TGC로 부터 finalchain이 구매 이력을 받게 되면 reward-api의 user/buyadd 요청
이때 user_wallet의 tbl_buy_history에 사용자 구매 이력이 저장됨 (finalchain으로 부터 tgc id, wallet id, user wallet, node wallet, nftid, hash, price 등의 정보를 전달받아 기록)

이렇게 노드와 사용자들이 등록되어야 정상적인 가동이 가능

노드가 등록됨에 따라 DGOS에서 보상이  reward-api로 node/transfer 요청 (전달 받는 데이터는 소스 지갑주소(고정 : 1번), 타깃 지갑주소, 보상량을 받아서 동작)
이때 노드의 tbl_wallet에 v_amount가 증가를 하게 되며 tbl_in/tbl_out 기록들이 기록된다.
node_wallet의 tbl_wallet에 있는 v_amount는 현재까지 보상된 총 금액이 기록된다.
이렇게 기록을 수행한 이후 바로 user_wallet에 있는 tbl_buy_history의 status가 1일고 d_tm이 null면서 naddr가 타깃지갑주소인 경우의 리스트들을 가져온다.
이렇게 가져온 리스트들의 합산을 하여 총합을 구하고 그 합과  tbl_buy_history의 각 회원의 price 값을 비율로 하여 node의 보상량을 비율에 따라 나누어서 user_wallet의 tbl_wallet에 입금시키고 tbl_in/tbl_out을 기록한다.
이때 보상받은 기록은 nonce를 1로 하여 기록을 하고 confirm_num을 7로 기록한다.
여기서 user_wallet에 있는 v_amount를 증가 시키지 않는다. v_amount는 사용가능 자산으로 우선은 t_amount (전체 사용자 보상량)을 증가시키고 i_amount를 (Lock 상태의 자산량) 증가시킨다. v_amount는 6개월이 지난 후에 unlock 프로세스에 따라 처리된다.

이렇게 보상들이 사용자 지갑으로 전송이 완료되면 전송된 총 금액을 node_wallet의 tbl_wallet에 있는 i_amount에 음수로 하여 기록한다. (0부터 해서 계속  substrict 처리하기에 항상 음수가 된다.) 일반적으로 v_amount + i_amount가 0이어야 하지만 소수점 자투리나 특정 상황에 따라 자산의 차이가 발생될 수 있다. (v_amount >= i_amount * (-1))
이렇게 v_amount와 i_amount를 node_wallet에서 나눈 이유는 실제 받은 보상과 사용자들에게 보상한 내용을 확인을 하기 위함이다.

이후 reward-api에서는 3시간 마다 scheduler를 가동하면서 user_wallet의 tbl_in에 기록된 confirm_num이 7이고 nonce가 1이면서 c_tm이 6개월이 경과한 건들을 가져와서 unlock 처리를 수행한다. 

unlock은 tbl_in의 amount를 확인하여 해당 회원의 tbl_wallet에서 i_amount를 amount 만큼 차감하고 v_amount에 amount를 더한다.
이렇게 하여 unlock된 자산을 관리하도록 구성하였다.

2) 프로젝트의 구성
본 프로젝트는 Spring Boot으로 구성되어 있다. 
프로젝트명 : WalletMgrApi
port : 14501
Database Server : 127.0.0.1 
db port : 3306
usernmae : hhuser
password : xptmxj2020

서비스 프로그램은 WalletMgrApiApplication class의 main 함수가 수행되면서 SpringApplication으로 실행된다. 
이 class에는 몇가지 전역 변수를 통하여 전체적인 호출을 제어하고 있다. (g_respmsg를 통하여 응답 에러를 처리하는 형태)
그리고 ProcessScheduler class에서 @Scheduled(cron = "0 0 0/1 * * *") 어노테이션을 붙인 printDate 함수 (이름을 바꾸어야 겠군)
를 통하여 매 1시간마다 호출하여 현재시간을 기준으로 6개월전 6시간전의 데이터로 부터6개월전 현재시간까지의 user_wallet의 tbl_in에서 lock이 풀릴 (180일 lock) 건을 찾아 unlock을 수행하는 스케쥴러가 동작하게 된다.

Client들로 부터 요청이 오게 되면 Web Filter에 의하여 WebServiceConfig.java에 정의된 Interceptor가 호출된다. 
그렇기에 com.walletmgr.api.Utils에 정의된 AuthInterceptor class의 preHandle 함수가 호출된다. 
여기서는 접근이 가능한 IP만 허용해주도록 하여 최소한의 보안 기능을 유지하도록 하였다.

이후 Controller 단이 호출되면서 NodeWalletController, UserWalletController에서 매핑된 url에 따라 각 요청을 처리할 함수들이 호출된다.
이 Controller 단에서는 CheckSignatureValidate 함수를 통하여 요청의 HashMap Parameter들을 분석하여 signature가 맞는지 확인한다.
여기서 2차 요청에 대한 인증을 수행하는 것이다. (허용된 apikey와 secret key로의 접근만 허용)

이후 service 단의 각 WalletServiceIm, WalletListServiceIm.. 등의 서비스 class들이 호출되며 여기서 기본적인 파라메터 추가 또는 필터를 통하여 Dao단을 호출하고 최종적으로 Mybatis Mapper를 통하여 DB의 내용들에 접근하게 되는 것이다.
(Mapper : WalletMgrApi/src/main/resources/static/mapper)
될 수 있으며 대부분 mapper와 transaction 처리를 통하여 처리하려고 하였지만 node_wallet의 보상을 user_wallet의 보상으로 분배하는 부분과 unlock 처리 부분은 직접적인 DB 접속과 자체의 transaction 처리를 통하여 에러가 발생될 경우 commit을 하지 않도록 처리하였다.

대부분 DB접속을 통하여 해당 필드들에 접근하는 방식이지만 TransferNodeWallet로 이름이 붙은 함수들이 조금 복잡하게 구성되어 있다.
이는 1번 지갑에서 지정된 node의 주소로 보상을 전송하고 ProcessRewardDistribute 함수를 통하여 해당 노드를 구매한 user_wallet의 tbl_buy_history에서 해당 node의 주소인 naddr을 가진 addr들을 추출한다. 이렇게 추출된 addr리스트에들을 user_wallet의 tbl_wallet의 1번 주소에서 각 구매 주소로 노드의 (보상 금액 * 구매가격 / 1000000)을 계산한 보상을 각 구매 지갑에 전송(DistributeUserWallet)을 수행하게 된다. (CalculateRewardAmount 함수 참조, 최초에는 보상 금액을 현재 구매된 노드들의 금액에 맞추어 분배를 하였지만 노드가 미리 부터 가동되고 후에 판매가 될 수도 있기에 고정 형태의 보상을 지급하도록 수정한 것이다.)

이렇게 node_wallet쪽의 전송 처리, tbl_in, tbl_out 기록, user_wallet의 분배 처리, tbl_in, tbl_out 기록을 복잡하게 처리해야 하기에 node_wallet쪽에서는 @Transaction 어노테이션을 사용하고 user_wallet에서는 setAutoCommit(false)로 설정하여 에러가 발생하면 commit을 처리하지 않도록 하였다.

WCL쪽에서는 해당 구매 이력별로 보너스가 쌓이는 상태를 확인하고 싶어 한다고 하여 다음과 같이 수정하였다.
tbl_out, tbl_in을 기록할때 tbl_out의 req_code에 nftid를 기록하게수정을 하였고, tbl_in의 prev_amount에도 nftid를 기록하게하여 구매 내역별로 쌓이는 데이터들을 nftid로 분리시키게 구성하였다. 이때 nftid를 발행하는 노드 별로 별도의 nftid가 생성된다고 하여 겹침을 방지하기 위하여 node의 주소를 포함하도록 하여 naddr + nftid = prev_amount 형태로 구분이 될수 있도록 수정하였다.
ProcessRewardDistribute 함수의 DistributeUserWallet함수 호출 인자의 마지막 인자 참조 (pdto.getNaddr() + pdto.getNftid())
